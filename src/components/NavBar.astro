---
import CaseIcon from "./icons/CaseIcon.astro";
import CodeIcon from "./icons/CodeIcon.astro";
import UserIcon from "./icons/UserIcon.astro";
import MailIcon from "./icons/MailIcon.astro";
import ArticleIcon from "./icons/ArticleIcon.astro";

import MobileNav from "./MobileNav.astro";
import DesktopNav from "./DesktopNav.astro";
const itemsNavBar = [
  {
    label: "Experiencia",
    link: "#experiencia",
    icon: CaseIcon,
    id: "experiencia",
  },
  { label: "Proyectos", link: "#proyectos", icon: CodeIcon, id: "proyectos" },
  { label: "Sobre mí", link: "#sobre-mi", icon: UserIcon, id: "sobre-mi" },
  {
    label: "Contacto",
    link: "mailto:ezequielr.dev@gmail.com?subject=Propuesta&body=Hola%2C%20te%20tengo%20una%20propuesta",
    icon: MailIcon,
    id: "contacto",
  },
];
const optionalItemsNavBar = [
  { label: "Mi blog", link: "#mi-blog", icon: ArticleIcon, id: "mi-blog" },
];
const itemsNavBarWithOptional = itemsNavBar.concat(optionalItemsNavBar);

export type ItemsNavMobileType = typeof itemsNavBarWithOptional;
export type ItemsNavBarType = typeof itemsNavBar;
---

<header class="sticky top-0 flex flex-col items-center justify-center z-50">
  <nav id="header-nav" class="h-12 sm:h-14  max-w-[700px]">
    <MobileNav {itemsNavBarWithOptional} />
    <DesktopNav itemsNavBar={itemsNavBar} />
  </nav>
</header>

<script>
  /** Poner los labels en color */
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("header nav a");
  /** Opciones del observer */
  const options = {
    root: null,
    rootMargin: "0px",
    threshold: 0.1,
  };
  /** Callback por cada una de las entradas que registre cuando pase se active por el threshold */
  const callback = (entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navItems?.forEach((item) => {
          if (item.getAttribute("aria-label") == entry.target.id) {
            item.classList.add("text-blue-900");
            item.classList.add("dark:text-blue-500");
          } else {
            item.classList.remove("text-blue-900");
            item.classList.remove("dark:text-blue-500");
          }
        });
      }
    });
  };
  const observer = new IntersectionObserver(callback, options);
  sections?.forEach((e) => {
    observer.observe(e);
  });
  const themeToggleButton = document.querySelectorAll("#theme-toggle");
  const divRandom = document.getElementById("div random");
  if (divRandom) {
    observer.observe(divRandom);
  }
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer?.disconnect();
    } else {
      sections.forEach((section) => {
        observer?.observe(section);
      });
    }
  };

  /**
   * Abrir menú
   */
  const openMenuButton = document.getElementById("open-smart-menu");
  const menuSmartPhone = document.getElementById("menu-smartphone");
  const closeMenuButton = document.getElementById("close-smart-menu");

  const toggleClassMenuSmart = () => {
    if (menuSmartPhone) {
      if (menuSmartPhone.classList.contains("hidden")) {
        menuSmartPhone.classList.remove("hidden");
        setTimeout(() => {
          menuSmartPhone.classList.add("flex");
          menuSmartPhone.classList.remove("translate-x-full");
          menuSmartPhone.classList.add("translate-x-0");
        }, 100); // Delay para permitir la transición suave
      } else {
        menuSmartPhone.classList.add("translate-x-full");
        menuSmartPhone.classList.remove("translate-x-0");
        setTimeout(() => {
          menuSmartPhone.classList.remove("flex");
          menuSmartPhone.classList.add("hidden");
        }, 300); // Espera para ocultarlo después de la animación
      }
    }
  };

  openMenuButton?.addEventListener("click", () => {
    toggleClassMenuSmart();
  });

  closeMenuButton?.addEventListener("click", () => {
    toggleClassMenuSmart();
  });

  /**Cerrar el menu cuando haga click en algun enlace */
  const anchorNodes = document.querySelectorAll("a");
  anchorNodes.forEach((e) => {
    e.addEventListener("click", toggleClassMenuSmart);
  });

</script>
<style is:global>
  .blured {
    animation-name: blur-light;
    animation-duration: 0.2s;
    animation-fill-mode: both;
    animation-timeline: scroll();
    animation-range: 1px;
    color: #0f151a;
  }

  @keyframes blur-light {
    from {
      border-width: 0px;
      border-color: transparent;
      background-color: transparent;
    }
    to {
      border-width: 1px;
      border-color: rgba(128, 128, 128, 0.335);
      border-radius: 9999px;
      background-color: rgba(155, 155, 155, 0.2);
      margin-top: 20px;
      backdrop-filter: blur(20px);
    }
  }

  .dark .blured {
    animation-name: blur-dark;
    animation-duration: 0.2s;
    animation-fill-mode: both;
    animation-timeline: scroll();
    animation-range: 1px;
    color: #e5ebf0;
  }

  @keyframes blur-dark {
    from {
      border-width: 0px;
      border-color: transparent;
      background-color: transparent;
    }
    to {
      border-width: 1px;
      border-color: rgba(128, 128, 128, 0.335);
      border-radius: 9999px;
      background-color: rgba(0, 0, 0, 0.2);
      margin-top: 20px;
      backdrop-filter: blur(20px);
    }
  }
</style>
